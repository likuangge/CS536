import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

%%

AND=				[&][&]
ASSIGN=				[=]
BOOL=				[b][o][o][l]
CIN=				[c][i][n]
COUT=				[c][o][u][t]
COMMA=				[,]
CURLY_LEFT=			[{]
CURLY_RIGHT=		[}]
DIGIT=        		[0-9]
DIVIDE=				[/]
DOT=				[.]
EQUALS=				[=][=]
ELSE=				[e][l][s][e]
FALSE=				[f][a][l][s][e]
GREATER=			[>]
GREATEREQ=			[>][=]
IF=					[i][f]
INT=				[i][n][t]
LESS=				[<]
LESSEQ=				[<][=]
LETTER=				[a-zA-Z]
MINUS=				[-]
MINUSMINUS=			[-][-]
NEWLINE=			[\n]
NOT=				[!]
NOTEQ=				[!][=]
OR=					[|][|]
PAREN_LEFT=			[(]
PAREN_RIGHT=		[)]
RETURN=				[r][e][t][u][r][n]
PLUS=				[+]
PLUSPLUS=			[+][+]
READ=				[>][>]
SEMICOLON=			[;]
STRUCT=				[s][t][r][u][c][t]
TIMES=				[*]
TRUE=				[t][r][u][e]
VOID=				[v][o][i][d]
WHILE=				[w][h][i][l][e]
WHITESPACE=   		[\040\t]
WRITE=				[<][<]

ID=					[_]*({LETTER}+)({DIGIT}|{LETTER}|[_])*
ESC_CHAR=			([\\][n])|([\\][t])|([\\][\"])|([\\]['])|([\\][\?])|([\\][\\])
BAD_ESC=			([\\][^nt'\"\\])|[\?]|([^\\][\\][\040])|[']|
STR_CHAR=			[!@#$%^&*()<>/\-+=_,.:;{}\[\]|]
STRINGLITERAL=		[\"]({LETTER}|{DIGIT}|{ESC_CHAR}|{WHITESPACE}|{STR_CHAR})+[\"]|([\"][\"])

COMMENT=			([/][/].*)|([#].*)

UNTERMINATED=		[\"]({LETTER}|{DIGIT}|{ESC_CHAR}|{WHITESPACE}|{STR_CHAR})*{NEWLINE}
BAD_ESC_CHAR=		[\"]({LETTER}|{DIGIT}|{ESC_CHAR}|{WHITESPACE}|{STR_CHAR}|{BAD_ESC})*[\"]
UNT_AND_ESC_CHAR=	[\"]({LETTER}|{DIGIT}|{ESC_CHAR}|{WHITESPACE}|{STR_CHAR}|{BAD_ESC})+{NEWLINE}



%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

{COMMENT}		{
				// ignore - Do nothing, but diff test is weird... //
}

{CURLY_RIGHT}	{ 
				Symbol S = 	new Symbol(sym.RCURLY,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num ++; 
				return S;
}

{CURLY_LEFT}	{
				Symbol S =	new Symbol(sym.LCURLY,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{PAREN_RIGHT}	{
				Symbol S = 	new Symbol(sym.RPAREN,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{PAREN_LEFT}	{
				Symbol S = 	new Symbol(sym.LPAREN,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{SEMICOLON}		{
				Symbol S = 	new Symbol(sym.SEMICOLON,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{COMMA}			{
				Symbol S = 	new Symbol(sym.COMMA,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{DOT}			{
				Symbol S = 	new Symbol(sym.DOT,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{WRITE}			{
				Symbol S = 	new Symbol(sym.WRITE,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{READ}			{
				Symbol S = 	new Symbol(sym.READ,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{PLUSPLUS}		{
				Symbol S = 	new Symbol(sym.PLUSPLUS,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{EQUALS}		{
				Symbol S = 	new Symbol(sym.EQUALS,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{PLUS}			{
				Symbol S = 	new Symbol(sym.PLUS,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{MINUSMINUS}	{
				Symbol S = 	new Symbol(sym.MINUSMINUS,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{MINUS}			{
				Symbol S = 	new Symbol(sym.MINUS,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{TIMES}			{
				Symbol S = 	new Symbol(sym.TIMES,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{DIVIDE}		{
				Symbol S = 	new Symbol(sym.DIVIDE,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{NOT}			{
				Symbol S = 	new Symbol(sym.NOT,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{AND}			{			
				Symbol S = 	new Symbol(sym.AND,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{OR}			{
				Symbol S = 	new Symbol(sym.OR,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{NOTEQ}			{
				Symbol S = 	new Symbol(sym.NOTEQUALS,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{LESS}			{
				Symbol S = 	new Symbol(sym.LESS,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{GREATER}		{
				Symbol S = 	new Symbol(sym.GREATER,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{LESSEQ}		{
				Symbol S = 	new Symbol(sym.LESSEQ,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{GREATEREQ}		{
				Symbol S = 	new Symbol(sym.GREATEREQ,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{ASSIGN}		{
				Symbol S = 	new Symbol(sym.ASSIGN,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num++;
				return S;
}

{BOOL}			{
				Symbol S = 	new Symbol(sym.BOOL,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=4;
				return S;
}

{INT}			{
				Symbol S = 	new Symbol(sym.INT,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=3;
				return S;
}

{VOID}			{
				Symbol S = 	new Symbol(sym.VOID,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=4;
				return S;
}

{TRUE}			{
				Symbol S = 	new Symbol(sym.TRUE,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=4;
				return S;
}

{FALSE}			{
				Symbol S = 	new Symbol(sym.FALSE,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=5;
				return S;
}

{CIN}			{
				Symbol S = 	new Symbol(sym.CIN,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=3;
				return S;
}

{COUT}			{
				Symbol S = 	new Symbol(sym.COUT,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=4;
				return S;
}

{IF}			{
				Symbol S = 	new Symbol(sym.IF,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=2;
				return S;
}

{ELSE}			{
				Symbol S = 	new Symbol(sym.ELSE,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=4;
				return S;
}

{WHILE}			{
				Symbol S = 	new Symbol(sym.WHILE,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=5;
				return S;
}

{RETURN}		{
				Symbol S = 	new Symbol(sym.RETURN,
							new TokenVal(yyline+1, CharNum.num)
							);
				CharNum.num+=6;
				return S;
}



\n        	{ CharNum.num = 1; }

{DIGIT}+|[-]{DIGIT}+  	{  
			int val = 0;
			// check integer bounds
			try {
				val = (new Integer(yytext())).intValue();
			}
			catch (NumberFormatException e) {
				if(yytext().charAt(0) == '-'){
					ErrMsg.warn(yyline+1, CharNum.num,
					"integer literal too small; using min value");
					
					val = Integer.MIN_VALUE;
				}
				else {
					ErrMsg.warn(yyline+1, CharNum.num,
					"integer literal too large; using max value");

					val = Integer.MAX_VALUE;
				}
			}
			
            Symbol S = new Symbol(sym.INTLITERAL,
                       new IntLitTokenVal(yyline+1, CharNum.num, val)
					   );
            CharNum.num += yytext().length();
            return S;
}

{ID}		{
			Symbol S = new Symbol(sym.ID,
						new IdTokenVal(yyline+1, CharNum.num, yytext())
						);

			CharNum.num += yytext().length();
			return S;
}

{STRINGLITERAL}	{
		Symbol S = new Symbol(sym.STRINGLITERAL,
					new StrLitTokenVal(yyline+1, CharNum.num, yytext())
					);
		CharNum.num += yytext().length();
		return S;
}

{UNTERMINATED}	{
				ErrMsg.fatal(yyline+1, CharNum.num,
							"unterminated string literal ignored");

				CharNum.num = 1;
}

{BAD_ESC_CHAR}	{
				ErrMsg.fatal(yyline+1, CharNum.num,
							"string literal with bad escaped character ignored");
				CharNum.num += yytext().length();
}

{UNT_AND_ESC_CHAR}	{
				ErrMsg.fatal(yyline+1, CharNum.num,
							"unterminated string literal with bad escaped character ignored");

				CharNum.num = 1;
}

{WHITESPACE}+  	{ CharNum.num += yytext().length(); }

.         	{ 
			ErrMsg.fatal(yyline+1, CharNum.num,
                         "illegal character ignored: " + yytext());
            CharNum.num++;
}

